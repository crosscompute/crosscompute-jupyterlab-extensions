import { IFileBrowserFactory } from '@jupyterlab/filebrowser';
import { ITranslator } from '@jupyterlab/translation';
import { Switch } from '@jupyterlab/ui-components';
import { CommandRegistry } from '@lumino/commands';
import { PanelLayout, Widget } from '@lumino/widgets';

import {
  logoIcon,
  MAIN_PANEL_CAPTION,
  MAIN_PANEL_CLASSNAME,
  MAIN_PANEL_ID,
  // START_DEPLOY_COMMAND,
  START_LAUNCH_COMMAND,
  // START_RENDER_COMMAND,
  // STOP_DEPLOY_COMMAND,
  STOP_LAUNCH_COMMAND
  // STOP_RENDER_COMMAND
} from './constant';

export class MainPanel extends Widget {
  constructor(options: MainPanel.IOptions) {
    const { commands, translator, browserFactory } = options;
    const trans = translator.load('jupyterlab');
    const browser = browserFactory.defaultBrowser;

    const automationLaunchSwitch = new Switch();
    // const automationRenderSwitch = new Switch();
    // const automationDeploySwitch = new Switch();
    automationLaunchSwitch.valueChanged.connect((_, args) => {
      commands.execute(
        args.newValue ? START_LAUNCH_COMMAND : STOP_LAUNCH_COMMAND
      );
    });
    /*
    automationRenderSwitch.valueChanged.connect((_, args) => {
      commands.execute(
        args.newValue ? START_RENDER_COMMAND : STOP_RENDER_COMMAND
      );
    });
    automationDeploySwitch.valueChanged.connect((_, args) => {
      commands.execute(
        args.newValue ? START_DEPLOY_COMMAND : STOP_DEPLOY_COMMAND
      );
    });
    */
    automationLaunchSwitch.label = trans.__('Launch');
    // automationRenderSwitch.label = trans.__('Render');
    // automationDeploySwitch.label = trans.__('Deploy');

    const automationInformation = new Widget();

    if (browser) {
      browser.model.pathChanged.connect((sender, args) => {
        automationInformation.node.innerHTML = args.newValue;
        // automationInformationDiv.innerHTML = args.newValue;
        // query automation information
        // a
        // update
        // console.log(args.newValue);
      });
    }
  }
}

namespace MainPanel {
  export interface IOptions {
    commands: CommandRegistry;
    translator: ITranslator;
    browserFactory: IFileBrowserFactory;
  }
}
